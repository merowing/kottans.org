<!DOCTYPE html>
<html>
<head>
<style type="text/css">
div#fruits {
    list-style: none;
    padding: 0;
    margin: 40px auto;
    font-size: 0;
    max-width: 680px;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    align-content: space-between;
}
div.fruit-1,
div.fruit-2,
div.fruit-3,
div.fruit-4,
div.fruit-5,
div.fruit-6,
div.fruit-7,
div.fruit-8,
div.fruit-9,
div.fruit-10,
div.fruit-11,
div.fruit-12,
div.fruit-13,
div.fruit-14,
div.fruit-15,
div.fruit-16,
div.fruit-17,
div.fruit-18,
div.fruit-19,
div.fruit-20 {
    background-position: center center;
    background-repeat: no-repeat;
}
.fruit-1 {
    background:url('fruit-1.png');
    transform: rotateY(180deg);
}
.fruit-2 {
    background:url('fruit-2.png');
    transform: rotateY(180deg);
}
.fruit-3 {
    background:url('fruit-3.png');
    transform: rotateY(180deg);
}
.fruit-4 {
    background:url('fruit-4.png');
    transform: rotateY(180deg);
}
.fruit-5 {
    background:url('fruit-5.png');
    transform: rotateY(180deg);
}
.fruit-6 {
    background:url('fruit-6.png');
    transform: rotateY(180deg);
}
.fruit-7 {
    background:url('fruit-7.png');
    transform: rotateY(180deg);
}
.fruit-8 {
    background:url('fruit-8.png');
    transform: rotateY(180deg);
}
.fruit-9 {
    background:url('fruit-9.png');
    transform: rotateY(180deg);
}
.fruit-10 {
    background:url('fruit-10.png');
    transform: rotateY(180deg);
}
.fruit-11 {
    background:url('fruit-11.png');
    transform: rotateY(180deg);
}
.fruit-12 {
    background:url('fruit-12.png');
    transform: rotateY(180deg);
}
.fruit-13 {
    background:url('fruit-13.png');
    transform: rotateY(180deg);
}
.fruit-14 {
    background:url('fruit-14.png');
    transform: rotateY(180deg);
}
.fruit-15 {
    background:url('fruit-15.png');
    transform: rotateY(180deg);
}
.fruit-16 {
    background:url('fruit-16.png');
    transform: rotateY(180deg);
}
.fruit-17 {
    background:url('fruit-17.png');
    transform: rotateY(180deg);
}
.fruit-18 {
    background:url('fruit-18.png');
    transform: rotateY(180deg);
}
.fruit-19 {
    background:url('fruit-19.png');
    transform: rotateY(180deg);
}
.fruit-20 {
    background:url('fruit-20.png');
    transform: rotateY(180deg);
}


.card {
    width: 140px;
    height: 140px;
    perspective: 1000px;
    box-sizing: border-box;
}
.cardBlockInside {
    
    position: relative;
    transition: transform 0.6s;
    transform-style: preserve-3d;
    height: 100%;
    width: 100%;
    border: 1px solid lightgray;
    cursor: pointer;
    box-sizing: border-box;
}
.flip {
    transform: rotateY(180deg);
}
.cardBlockInside > div {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
}
.back {
    background-color: gray;
}
.same {
    border: 1px solid lightgray;
}

</style>
</head>
<body>
<main>
    <div id="fruits">


    </div>
</main>
<script>

    // ------------------------------

    let getNumber = (min, max) => Math.round(Math.random() * (max - min) + min);
    
    let l = 0;
    let regexp;
    //let arr = ['cherry', 'orange', 'apple', 'lemon', 'banana', 'apricot'];
    let arr = ['fruit-1', 'fruit-2', 'fruit-3', 'fruit-4', 'fruit-5', 'fruit-6'];//, 'fruit-7'];
    let arrElems = arr.length;
    let counts = 2;
    newArr = [];
    for(let i = 0; i < arrElems * counts; i++) {
        l = arr[getNumber(0, arrElems - 1)];
        if(!newArr.length) { newArr.push(l); continue; }

        regexp = new RegExp(l, "g");
        if(!newArr.join(',').match(regexp)) {
            newArr.push(l);
        }else if(newArr.join(',').match(regexp).length <= counts - 1) {
            newArr.push(l);
        }else {
            i--;
        }
    }
    console.log(newArr);
    
    // ------------------------------

    let ids = [];
    let maxIds = counts;
    let elems = [];
    let timer;
    let cards = 0;
    let loadCards = newArr.length;

    let fruits = document.querySelector('#fruits');

    // ---------------

    let fruitDivFragment = document.createDocumentFragment('div');
    for(let i = 0; i < loadCards; i++) {
        let div = document.createElement("div");
        div.setAttribute('class', 'card');
        div.innerHTML = `
            <div class="cardBlockInside">    
                <div class="${newArr[i]}"></div>
                <div class="back" data-id="${/[0-9]+/.exec(newArr[i])[0]}"></div>
            </div>
        `;
        fruitDivFragment.appendChild(div);
    }
    fruits.appendChild(fruitDivFragment);

    // ---------------

    fruits.addEventListener("click", e => {
        let elem = e.target;
        
        // check if element has id. back has, front hasn't
        if(!elem.dataset.id || ids.length === maxIds) return;

        // set '.flip' class block
        let className = 'flip';
        let arrClass = elem.parentNode.getAttribute('class').split(' ');
        if(arrClass.indexOf(className) === -1) {
            arrClass.push(className);
        }
        elem.parentNode.setAttribute('class', arrClass.join(' '));
        // ----

        
        let id = elem.dataset.id;
        if(ids.length < maxIds) {
            ids.push(elem.dataset.id);
            elems.push(elem.parentNode);
        }

        if(ids.length === maxIds) {
            let firstIds = ids[0];
            // store the first id and compare with others ids from the ids array
            // if filter return empty array that means all cards the same
            if(ids.filter(id => firstIds !== id).length) {
                cardsSame(false, won);
            }else {
                cardsSame(true, won);
            }
        }

        function won(cards) {
            // wait for when all cards will be hidden on the field
            setTimeout(() => {
                if(cards === loadCards) {
                    alert("Congratulations!\r\nYou won.");
                    //confirm("Do you want to play again?");
                }
            }, 500);
        }

        function cardsSame(state, callback) {
            timer = setTimeout(function() {
                for(let i = 0; i < elems.length; i++) {
                    if(state) {
                        elems[i].parentNode.setAttribute('class', elems[i].parentNode.getAttribute('class') + ' same');
                        elems[i].parentNode.removeChild(elems[i]);
                    }else {
                        let classStr = elems[i].getAttribute('class').split(' ').filter(i => i != 'flip');
                        elems[i].setAttribute('class', classStr);
                    }

                    if(i === elems.length - 1) {
                        elems = [];
                        ids = [];
                        
                        if(state) {
                            cards += maxIds;
                            callback(cards);
                        }
                    }
                }

            }, 1000);
        }
    });

    /*let card = document.querySelector('.card');
    card.addEventListener("click", e => {
        let insideDiv = card.querySelector('div');
        let insideDivClass = (insideDiv.getAttribute('class')).split(' ');
        let flipClass = 'flip';
        let flipClassIndex = insideDivClass.indexOf(flipClass);

        if(flipClassIndex === -1) {
            insideDivClass.push(flipClass);
        }else {
            insideDivClass.splice(flipClassIndex, 1);
        }
        insideDiv.setAttribute('class', insideDivClass.join(' '));

        //if(card.querySelector('div').classList.toString().indexOf('flip') <= 0) {
        //    card.querySelector('div').classList.add('flip');
        //}else {
        //    card.querySelector('div').classList.remove('flip');
        //}
        //card.querySelector('div').classList.indexOf('flip')
    });*/

    let block = document.querySelector("#fruits");

    /*let fruitDivFragment = document.createDocumentFragment('div');
    for(let i = 0; i < 20; i++) {
        let div = document.createElement("div");
        div.setAttribute('class', `fruit-${i+1}`);
        div.setAttribute('data-id', i);
        div.innerHTML = "<div></div>";
        fruitDivFragment.appendChild(div);
    }
    block.appendChild(fruitDivFragment);

    block.addEventListener("click", e => {
        alert(e.target.dataset.id)
        alert(e.target.getAttribute('class'));
    });*/

        let blockWidth = block.querySelector('div').offsetWidth;
        let maxItems = Math.floor(block.clientWidth / blockWidth);
        let spaceBetween = (block.clientWidth - maxItems * blockWidth) / (maxItems - 1);

        let columns = Math.ceil(block.querySelectorAll(':scope > div').length / maxItems);

        if(columns > 1) block.style.height = (columns * blockWidth + (columns - 1) * spaceBetween) + 'px';
</script>
</body>
</html>